generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum AuthType {
  GOOGLE
  EMAIL
  FACEBOOK
}

model Banner {
  id         String   @id @default(uuid())
  title      String   @unique
  image      String
  link       String
  status     String   @default("show")
  slug       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([status, slug])
  @@map("banners")
}

model Coupon {
  id                String            @id @default(uuid())
  name              String            @unique
  description       String?
  discount_percent  Float             @default(0)
  start_date        DateTime
  end_date          DateTime
  is_active         Boolean
  status            Int               @default(1)
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  product_to_coupon ProductToCoupon[]

  @@index([name, start_date, end_date, status])
  @@map("coupons")
}

model ProductToCoupon {
  id              String   @id @default(uuid())
  product         Product  @relation(fields: [product_id], references: [id])
  product_id      String
  coupon          Coupon   @relation(fields: [coupon_id], references: [id])
  coupon_id       String
  activation_date DateTime
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@map("product_to_coupon")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  password       String?
  name           String?
  avatar         String?         @default("https://ct466-project.s3.ap-southeast-2.amazonaws.com/default.jpg")
  phone          String?
  address        UserAddress?
  cart           Cart?
  orders         Order[]
  history_search HistorySearch[]
  review         Review[]
  refresh_token  String?
  role           Role            @default(USER)
  auth_type      AuthType        @default(EMAIL)
  is_active      Boolean         @default(false)
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt

  @@index([email, is_active])
  @@map("users")
}

model UserAddress {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String   @unique
  address    String?
  province   String
  district   String
  ward       String
  hamlet     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("user_address")
}

model Cart {
  id                String        @id @default(uuid())
  user              User          @relation(fields: [user_id], references: [id])
  user_id           String        @unique
  product_option    ProductOption @relation(fields: [product_option_id], references: [id])
  product_option_id String
  quantity          Int           @default(1)
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt

  @@index([user_id, product_option_id])
  @@map("carts")
}

model Product {
  id                String               @id @default(uuid())
  name              String
  descriptions      ProductDescription[]
  brand             Brand                @relation(fields: [brand_id], references: [id])
  brand_id          String
  category          Category             @relation(fields: [category_id], references: [id])
  category_id       String
  price             Float
  promotions        Json
  warranties        Json
  label             String
  product_options   ProductOption[]
  product_to_coupon ProductToCoupon[]
  created_at        DateTime             @default(now())
  updated_at        DateTime             @updatedAt

  @@map("products")
}

model ProductOption {
  id                   String               @id @default(uuid())
  product              Product              @relation(fields: [product_id], references: [id])
  product_id           String
  thumbnail            String
  product_images       ProductImage[]
  label_image          String
  price_modifier       Float                @default(0)
  stock                Int                  @default(0)
  sku                  String
  discount             Float                @default(0)
  is_sale              Boolean              @default(false)
  is_deleted           Boolean              @default(false)
  slug                 String
  reviews              Review[]
  order_detail         OrderDetail[]
  cart                 Cart[]
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
  product_option_value ProductOptionValue[]
  technical_specs      TechnicalSpecs?

  @@index([slug, is_sale, is_deleted])
  @@map("product_options")
}

model TechnicalSpecs {
  id                String        @id @default(uuid())
  product_option    ProductOption @relation(fields: [product_option_id], references: [id])
  product_option_id String        @unique
  screen            String?
  screen_size       String?
  os                String?
  front_camera      String?
  rear_camera       String?
  chip              String?
  ram               String?
  rom               String?
  sim               String?
  battery           String?
  connection        String?
  weight            String?
  other_info        Json?
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt

  @@index([screen_size, ram, rom, connection])
  @@map("technical_specs")
}

model Option {
  id                   String               @id @default(uuid())
  name                 String
  product_option_value ProductOptionValue[]

  @@map("options")
}

model ProductOptionValue {
  id                String        @id @default(uuid())
  product_option    ProductOption @relation(fields: [product_option_id], references: [id])
  product_option_id String
  option            Option        @relation(fields: [option_id], references: [id])
  option_id         String
  value             String
  adjust_price      Float         @default(0)

  @@index([product_option_id, option_id])
  @@map("product_option_values")
}

model ProductDescription {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [product_id], references: [id])
  product_id String
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("product_descriptions")
}

model ProductImage {
  id                String        @id @default(uuid())
  product_option    ProductOption @relation(fields: [product_option_id], references: [id])
  product_option_id String
  image_url         String
  image_alt_text    String?
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt

  @@map("product_images")
}

model Brand {
  id          String    @id @default(uuid())
  name        String
  description String?
  logo_url    String
  products    Product[]
  is_deleted  Boolean   @default(false)
  slug        String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@index([slug, is_deleted])
  @@map("brands")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  products    Product[]
  is_deleted  Boolean   @default(false)
  slug        String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@index([slug, is_deleted])
  @@map("categories")
}

model Order {
  id            String         @id @default(uuid())
  User          User           @relation(fields: [user_id], references: [id])
  user_id       String
  name          String
  phone         String
  order_details OrderDetail[]
  shipping      OrderShipping?
  order_date    DateTime?
  total_amount  Float          @default(0)
  payment       Payment?
  note          String?
  status        Int            @default(0)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt

  @@index([status])
  @@map("orders")
}

model OrderDetail {
  id                String        @id @default(uuid())
  order             Order         @relation(fields: [order_id], references: [id])
  order_id          String
  product_option    ProductOption @relation(fields: [product_option_id], references: [id])
  product_option_id String
  quantity          Int           @default(1)
  price             Float
  subtotal          Float
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt

  @@map("order_details")
}

model Payment {
  id             String   @id @default(uuid())
  order          Order    @relation(fields: [order_id], references: [id])
  order_id       String   @unique
  total_price    Float
  payment_method String
  transaction_id String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("payments")
}

model Delivery {
  id             String          @id @default(uuid())
  name           String
  status         Int             @default(0)
  slug           String          @unique
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  order_shipping OrderShipping[]

  @@index([status, slug])
  @@map("delivery")
}

model OrderShipping {
  id              String   @id @default(uuid())
  order           Order    @relation(fields: [order_id], references: [id])
  order_id        String   @unique
  delivery        Delivery @relation(fields: [delivery_id], references: [id])
  delivery_id     String
  address         String?
  province        String
  district        String
  ward            String
  hamlet          String?
  estimate_date   String
  fee             Int      @default(0)
  tracking_number String   @unique
  order_label     String?  @unique
  status          Int      @default(0)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@index([status])
  @@map("order_shipping")
}

model HistorySearch {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [user_id], references: [id])
  user_id        String
  search_content String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("history_search")
}

model Review {
  id                String        @id @default(uuid())
  parent            Review?       @relation("parent", fields: [parent_id], references: [id], onDelete: Cascade)
  parent_id         String?
  children          Review[]      @relation("parent")
  user              User          @relation(fields: [user_id], references: [id])
  user_id           String
  product_option    ProductOption @relation(fields: [product_option_id], references: [id])
  product_option_id String
  star              Float?        @default(5)
  comment           String
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt

  @@index([star])
  @@map("reviews")
}
